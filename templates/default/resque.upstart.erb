# /etc/init/resque.conf - resque config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple resque instances with
# Upstart, Ubuntu's native service management tool.
#
# See resque-manager.conf for how to manage all resque instances at once.
#
# Save this config as /etc/init/resque.conf then mange resque with:
#   sudo start resque app=/path/to/app index=0 queues=list,of,queues
#   sudo stop resque app=/path/to/app  index=0 queues=list,of,queues
#   sudo status resque app=/path/to/app index=0 queues=list,of,queues
#
# or use the service command:
#   sudo service resque {start,stop,restart,status}
#

description "Resque Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping resque-manager or runlevel [06])

respawn
respawn limit 3 30

# TERM and USR1 are sent by resquectl when stopping resque.  Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM USR1 QUIT

instance ${app}-${index}-${queues}


exec sudo -u <%= @user %> /bin/bash -c "cd $app && <%= @exec_prefix %> rake resque:work QUEUE=$queues PIDFILE=$app/<%= @pids_dir %>/${index}.pid RAILS_ENV=<%= @environment %> >> <%= @logfile %> 2>&1"

pre-stop script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<EOT
  logger -t resque "Stopping process: $app-$index-$queues"
EOT
end script
