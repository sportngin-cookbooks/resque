#!/bin/bash
### BEGIN INIT INFO
# Provides:  resque
# Short-Description: resque - a Redis-backed Ruby library for creating background jobs
# Description:  resque - a Redis-backed Ruby library for creating background jobs, placing those jobs on multiple queues, and processing them later.
### END INIT INFO
. /etc/init.d/functions

log_daemon_msg () {
    # Dummy function to be replaced by LSB library.

    echo $@
}

LOGFILE="<%= @logfile %>"
RESQUE_CONF="<%= @resque_conf %>"
RESQUE_BIN="<%= @bin_file %>"
TIMEOUT="<%= @timeout %>"
STATUS="1"

pid_running() {
  ps -A -o pid= | grep -c $1
}

do_for_each_worker() {
  local action="$1"
  local pid_start=0
  for i in `cat $RESQUE_CONF`; do
    app=`echo $i | cut -d , -f 1`
    num_workers=`echo $i | cut -d , -f 2`
    queues=`echo $i | cut -d , -f 3-`
    for j in `seq $pid_start $(($pid_start + $num_workers - 1))`; do
      $action $app $j $queues
    done
    pid_start=$(($j+1))
  done
}

# Start/Restart a single resque queue
start_one_worker() {
  local pidfile
  local pid

  pidfile=$1/tmp/pids/$2.pid
  if [ -e $pidfile ]; then
    pid=`cat $pidfile`
    # If the resque isn't running, run it, otherwise restart it.
    if [ "`pid_running $pid`" -eq 0 ]; then
      start_daemon $1 $2 $3
    else
      stop_one_worker $1 $2 $3
      start_daemon $1 $2 $3
    fi
  else
    start_daemon $1 $2 $3
  fi
}

start_daemon() {
  log_daemon_msg "--> Starting Resque $1-$3"
  log_daemon_msg "logging to $1/$LOGFILE"

  app=$1 index=$2 queues=$3 daemon $RESQUE_BIN
  log_daemon_msg "Started Resque $1-$3"
}

#
# Function that stops the daemon/service
#
stop_one_worker() {
  local pidfile
  local pid
  log_daemon_msg "--> Stopping Resque $1-$2"

  pidfile=$1/tmp/pids/$2.pid
  if [ -e $pidfile ]; then
    pid=`cat $pidfile`
    if [ "`ps -A -o pid= | grep -c $pid`" -eq 0 ]; then
      log_daemon_msg "---> Resque $1-$2 isn't running."
    else
      log_daemon_msg "---> About to kill PID `cat $pidfile`"
      kill -QUIT $pid
      for i in `seq 1 $TIMEOUT`; do
        checkpid $pid || break
        sleep 1
      done
      if checkpid $pid ; then
        log_daemon_msg "Failed to kill Resque $1-$2 gracefully..hard shut down"
        kill -KILL $pid >/dev/null 2>&1
      fi
      # Many daemons don't delete their pidfiles when they exit.
      rm -f $pidfile
    fi
  else
    log_daemon_msg "---> No Resque $1-$2 here..."
  fi
  return 0
}

status_for_worker() {
  local pidfile
  local pid
  local something_running=1
  pidfile=$1/tmp/pids/$2.pid

  if [ -e $pidfile ]; then
    pid=`cat $pidfile`
    if [ "`pid_running $pid`" -eq 0 ]; then
      log_daemon_msg "---> Resque $1-$2 isn't running."
    else
      log_daemon_msg "---> Resque $1-$2 is running."
      STATUS=0
    fi
  else
    log_daemon_msg "---> No Resque $1-$2 here..."
  fi
}

start() {
  log_daemon_msg "=> Starting Resque Queues.."
  do_for_each_worker "start_one_worker"
}

stop() {
  log_daemon_msg "=> Stopping All resque workers"
  do_for_each_worker "stop_one_worker"
}

status() {
  do_for_each_worker "status_for_worker"
  exit $STATUS
}


case "$1" in
  start) start ;;
  stop) stop ;;
  status) status ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart}" >&2
    exit 1
    ;;
esac
